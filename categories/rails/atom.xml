<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | Hey, I’m Parker.]]></title>
  <link href="http://blog.parkermoore.de/categories/rails/atom.xml" rel="self"/>
  <link href="http://blog.parkermoore.de/"/>
  <updated>2014-07-25T15:14:44-04:00</updated>
  <id>http://blog.parkermoore.de/</id>
  <author>
    <name><![CDATA[Parker Moore]]></name>
    <email><![CDATA[parkrmoore@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Launching a Rails Console with Capistrano]]></title>
    <link href="http://blog.parkermoore.de/2013/08/07/launching-a-rails-console-with-capistrano/"/>
    <updated>2013-08-07T20:36:00-04:00</updated>
    <id>http://blog.parkermoore.de/2013/08/07/launching-a-rails-console-with-capistrano</id>
    <content type="html"><![CDATA[<p>If you&#39;re using the popular Capistrano web deployment framework, you will likely
have wished you had an easy way to perform a quick task in the production rails
console on one of your servers. Many thanks to
<a href="https://github.com/colszowka">@colszowka</a> for <a href="https://gist.github.com/benedikt/1115513#comment-576015">this
solution</a>:</p>

<p><strong>NOTE</strong>: This is for Capistrano v2. Things are different for v3.</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">namespace</span> <span class="ss">:rails</span> <span class="k">do</span>
  <span class="n">desc</span> <span class="s2">"Remote console"</span>
  <span class="n">task</span> <span class="ss">:console</span><span class="p">,</span> <span class="ss">:roles</span> <span class="o">=&gt;</span> <span class="ss">:app</span> <span class="k">do</span>
    <span class="n">run_interactively</span> <span class="s2">"bundle exec rails console </span><span class="si">#{</span><span class="n">rails_env</span><span class="si">}</span><span class="s2">"</span>
  <span class="k">end</span>

  <span class="n">desc</span> <span class="s2">"Remote dbconsole"</span>
  <span class="n">task</span> <span class="ss">:dbconsole</span><span class="p">,</span> <span class="ss">:roles</span> <span class="o">=&gt;</span> <span class="ss">:app</span> <span class="k">do</span>
    <span class="n">run_interactively</span> <span class="s2">"bundle exec rails dbconsole </span><span class="si">#{</span><span class="n">rails_env</span><span class="si">}</span><span class="s2">"</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">run_interactively</span><span class="p">(</span><span class="n">command</span><span class="p">,</span> <span class="n">server</span><span class="o">=</span><span class="kp">nil</span><span class="p">)</span>
  <span class="n">server</span> <span class="o">||=</span> <span class="n">find_servers_for_task</span><span class="p">(</span><span class="n">current_task</span><span class="p">).</span><span class="nf">first</span>
  <span class="nb">exec</span> <span class="sx">%Q(ssh </span><span class="si">#{</span><span class="n">server</span><span class="p">.</span><span class="nf">host</span><span class="si">}</span><span class="sx"> -t 'cd </span><span class="si">#{</span><span class="n">current_path</span><span class="si">}</span><span class="sx"> &amp;&amp; </span><span class="si">#{</span><span class="n">command</span><span class="si">}</span><span class="sx">')</span>
<span class="k">end</span>
</code></pre></div>
<p>And, <em>vòila</em>! Run <code>cap rails:console</code> and you&#39;re in business.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby and Rails]]></title>
    <link href="http://blog.parkermoore.de/2012/06/25/ruby-and-rails/"/>
    <updated>2012-06-25T23:38:00-04:00</updated>
    <id>http://blog.parkermoore.de/2012/06/25/ruby-and-rails</id>
    <content type="html"><![CDATA[<p>So there&#39;s been a lot of hype about <a href="http://www.ruby-lang.org/en/">Ruby</a> over the past several years. For those of you who are interested in programming and programming languages, you heard about it right from the start, as its beautiful syntax and ease of use lured many programmers into its use.</p>

<p>While Ruby is wonderful, it wouldn&#39;t be what it is today without the existence of <a href="http://rubyonrails.org/">Ruby on Rails</a>. This web framework posed the first real threat to PHP. Rails was powerful and agile, and helped web devs create incredible web apps with incredible ease. The generators that came along with this gem made it possible to get a completely functional website up in a matter of <em>hours</em>, rather than days. That was incredible.</p>

<p>I used Rails on and off, switching between it and CakePHP. I didn&#39;t really understand Rails&#39; routes and wanted something like CakePHP&#39;s <code>bake</code> functionality which creates an entire scaffold with styling and everything. I didn&#39;t object to the un-RESTful CakePHP nature of using just <code>GET</code> and <code>POST</code> requests, as I didn&#39;t need the RESTful functionality for any of the sites I was creating. I used Rails for a couple projects, but it always felt like I was coding more than was necessary.</p>

<p>I started working at <a href="http://www.thinktopography.com">Think Topography</a> this summer and was tasked with building the new <a href="http://www.ithacahours.com">Ithaca Hours</a> mobile web app that would facilitate the use of Ithaca Hours. My boss had always used Rails and suggested that I use Rails for the API end of this project. It seemed like the best choice, given the requirements of the project, and so it began: I dove back into Rails.</p>

<p>Once I wrapped my head around routes and the devise/warden authentication framework, I was truckin&#39;. I was making huge progress on this API and learning gobs of information along the way. I was loving Rails and appreciating its incredible power. I was writing tests in rspec, which was a joy when combined with factory_girl.</p>

<p>I recently worked on a project for <a href="http://us.moet.com">Moët &amp; Chandon USA</a> that was built upon the CakePHP framework, and I was not nearly as excited about returning to this framework as I expected to be, given my incredible comfort with the language and the framework.</p>

<p>But my work at Think Topography has changed me -- I&#39;m a Rails guy for sure.</p>
]]></content>
  </entry>
  
</feed>
