<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: osx | Hey, Iâ€™m Parker.]]></title>
  <link href="http://blog.parkermoore.de/categories/osx/atom.xml" rel="self"/>
  <link href="http://blog.parkermoore.de/"/>
  <updated>2014-07-16T23:34:41-04:00</updated>
  <id>http://blog.parkermoore.de/</id>
  <author>
    <name><![CDATA[Parker Moore]]></name>
    <email><![CDATA[parkrmoore@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Don't Like Being Tracked?]]></title>
    <link href="http://blog.parkermoore.de/2014/07/16/dont-like-being-tracked/"/>
    <updated>2014-07-16T21:58:53-04:00</updated>
    <id>http://blog.parkermoore.de/2014/07/16/dont-like-being-tracked</id>
    <content type="html"><![CDATA[<p>I don&#39;t like being tracked by Web giants when I&#39;m not on their websites. As
more sites integrate Twitter, Facebook, and Google support, I can&#39;t help
but be tracked on almost every site I visit.</p>

<p>Luckily, the integrations for these three aforementioned companies is quite
simple to subvert (at least partially). If you&#39;re running a unix-based
machine, you can add just a few lines to your <code>/etc/hosts</code> file and you&#39;re
well on your way to Web privacy.</p>

<p>Open up a new tab, and open the Developer Console. Open the Network tab.
Now navigate to your favourite blog, news site, etc. You&#39;ll see each
individual network request that is made from that page listed in the
Network pane of the Developer Console. Scroll through requests and make
note of the domain names you wish to block.</p>

<p>Once you have the list of domain names, simply use your <code>hosts</code> file to
reroute those domains to your local server (<code>127.0.0.1</code>). Here&#39;s an example:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">127.0.0.1     connect.facebook.net
127.0.0.1     google-analytics.com www.google-analytics.com
127.0.0.1     platform.twitter.com
127.0.0.1     adroll.com a.adroll.com d.adroll.com
127.0.0.1     ib.adnxs.com
127.0.0.1     googleadservices.com www.googleadservices.com
</code></pre></div>
<p>In this example, I&#39;ve blocked Facebook, Google Analytics, Twitter, Ad Roll,
Google Ad Services and the unknown &quot;adnxs&quot; service.</p>

<p>Preface each domain name with the address of your local server <code>127.0.0.1</code>
and group each line based on the second-level domain (e.g. <code>adroll.com</code>).
Add each of these lines to your <code>/etc/hosts</code> file (note: this will require
root privileges). Don&#39;t forget to save it when you&#39;re done.</p>

<p>Now navigate to that same site again, with the Network pane still open. You
should now get 404&#39;s or 500&#39;s when you try to access those same domains you
&#39;blocked&#39;.</p>

<p>For a solution that doesn&#39;t require halting access to these hosts, check
out the Tor project.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing Command-T with OS X Maverick's Built-In Vim]]></title>
    <link href="http://blog.parkermoore.de/2014/01/02/installing-command-t-with-os-x-mavericks-built-in-vim/"/>
    <updated>2014-01-02T01:03:00-05:00</updated>
    <id>http://blog.parkermoore.de/2014/01/02/installing-command-t-with-os-x-mavericks-built-in-vim</id>
    <content type="html"><![CDATA[<p>I was fortunate enough to, just today, pick up a new computer. My first hardware
in over 4 years, I had been holding off. Once my trusty MacBook Pro bit the dust
last night and I found out the repair cost was extraordinary, I bit the bullet.</p>

<p>So, you&#39;re probably in a similar place. You relatively recently got a shiny new
Macintosh and you&#39;re so excited to start writing code and making a difference
with those skillz of yours. Except one this is missing: <a href="https://github.com/wincent/Command-T">Command-T</a>.</p>

<p>Lucky for you, sir, I am here to help. OS X Maverick&#39;s built-in vim distribution
comes with Ruby support already (which it needs for Command-T) so you&#39;re good
there. Now you need to download and compile Command-T. Should be easy, right?
Well, not quite.</p>

<p>Mavericks was notable for Ruby users because it ships with Ruby 2.0. All
previous versions that I had ever used shipped with 1.8.7 so this was a huge
bonus. Problem is, your pre-installed vim wasn&#39;t compiled with 2.0.0, it was
compiled with 1.8.7.</p>

<p>To check this, run the following in vim in NORMAL mode:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">:ruby puts "#{RUBY_VERSION}-p#{RUBY_PATCHLEVEL}"
</code></pre></div>
<p>For me, that output <code>1.8.7-p358</code>. So that means the Ruby verison that vim is
using is <code>1.8.7-p358</code>, and we need to compile Command-T with that version. To do
so, install it:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="gp">$ </span>rbenv install 1.8.7-p358
</code></pre></div>
<p>Boom! Now download and install Command-T:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="gp">$ </span>git clone https://github.com/wincent/Command-T.git ~/.vim/bundle/Command-T
<span class="gp">$ </span><span class="nb">cd</span> ~/.vim/bundle/Command-T <span class="c"># for tpope's Pathogen</span>
<span class="gp">$ </span>rbenv <span class="nb">local </span>1.8.7-p358
<span class="gp">$ </span>rbenv rehash
<span class="gp">$ </span>gem install bundler
<span class="gp">$ </span>bundle install
<span class="gp">$ </span>bundle <span class="nb">exec </span>rake make
</code></pre></div>
<p>Aaaaand boom, you&#39;re done. Open up <code>vim</code> and type your leaderkey then <code>t</code> (for
me, that&#39;s <code>,t</code>) to launch the prompt.</p>

<p>If you get a weird SIGTERM error when you launch <code>vim</code>, then you installed
Command-T with the wrong Ruby version. Remove <code>ruby/command-t/ext.bundle</code> and
try again.</p>
]]></content>
  </entry>
  
</feed>
