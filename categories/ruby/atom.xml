<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Hey, I’m Parker.]]></title>
  <link href="http://blog.parkermoore.de/categories/ruby/atom.xml" rel="self"/>
  <link href="http://blog.parkermoore.de/"/>
  <updated>2014-07-16T23:34:41-04:00</updated>
  <id>http://blog.parkermoore.de/</id>
  <author>
    <name><![CDATA[Parker Moore]]></name>
    <email><![CDATA[parkrmoore@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Installing Command-T with OS X Maverick's Built-In Vim]]></title>
    <link href="http://blog.parkermoore.de/2014/01/02/installing-command-t-with-os-x-mavericks-built-in-vim/"/>
    <updated>2014-01-02T01:03:00-05:00</updated>
    <id>http://blog.parkermoore.de/2014/01/02/installing-command-t-with-os-x-mavericks-built-in-vim</id>
    <content type="html"><![CDATA[<p>I was fortunate enough to, just today, pick up a new computer. My first hardware
in over 4 years, I had been holding off. Once my trusty MacBook Pro bit the dust
last night and I found out the repair cost was extraordinary, I bit the bullet.</p>

<p>So, you&#39;re probably in a similar place. You relatively recently got a shiny new
Macintosh and you&#39;re so excited to start writing code and making a difference
with those skillz of yours. Except one this is missing: <a href="https://github.com/wincent/Command-T">Command-T</a>.</p>

<p>Lucky for you, sir, I am here to help. OS X Maverick&#39;s built-in vim distribution
comes with Ruby support already (which it needs for Command-T) so you&#39;re good
there. Now you need to download and compile Command-T. Should be easy, right?
Well, not quite.</p>

<p>Mavericks was notable for Ruby users because it ships with Ruby 2.0. All
previous versions that I had ever used shipped with 1.8.7 so this was a huge
bonus. Problem is, your pre-installed vim wasn&#39;t compiled with 2.0.0, it was
compiled with 1.8.7.</p>

<p>To check this, run the following in vim in NORMAL mode:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">:ruby puts "#{RUBY_VERSION}-p#{RUBY_PATCHLEVEL}"
</code></pre></div>
<p>For me, that output <code>1.8.7-p358</code>. So that means the Ruby verison that vim is
using is <code>1.8.7-p358</code>, and we need to compile Command-T with that version. To do
so, install it:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="gp">$ </span>rbenv install 1.8.7-p358
</code></pre></div>
<p>Boom! Now download and install Command-T:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="gp">$ </span>git clone https://github.com/wincent/Command-T.git ~/.vim/bundle/Command-T
<span class="gp">$ </span><span class="nb">cd</span> ~/.vim/bundle/Command-T <span class="c"># for tpope's Pathogen</span>
<span class="gp">$ </span>rbenv <span class="nb">local </span>1.8.7-p358
<span class="gp">$ </span>rbenv rehash
<span class="gp">$ </span>gem install bundler
<span class="gp">$ </span>bundle install
<span class="gp">$ </span>bundle <span class="nb">exec </span>rake make
</code></pre></div>
<p>Aaaaand boom, you&#39;re done. Open up <code>vim</code> and type your leaderkey then <code>t</code> (for
me, that&#39;s <code>,t</code>) to launch the prompt.</p>

<p>If you get a weird SIGTERM error when you launch <code>vim</code>, then you installed
Command-T with the wrong Ruby version. Remove <code>ruby/command-t/ext.bundle</code> and
try again.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install rbenv on Ubuntu 12.04]]></title>
    <link href="http://blog.parkermoore.de/2013/02/06/install-rbenv-on-ubuntu-12-dot-04/"/>
    <updated>2013-02-06T21:31:00-05:00</updated>
    <id>http://blog.parkermoore.de/2013/02/06/install-rbenv-on-ubuntu-12-dot-04</id>
    <content type="html"><![CDATA[<p>So, I&#39;ll admit it: I absolutely adore rbenv.</p>

<p>In light of this, I&#39;ve been using it at my work at 6Wunderkinder the past couple weeks.
6W uses AWS like nobody&#39;s business, and the Ubuntu EC2 instances I&#39;ve been interacting
with are really bare-bones. So I wanted to write this script for you, the Ubuntu &amp; Ruby
user, in order for you to very quickly get up and running with rbenv &amp; the latest Ruby
MRI. Just copy it and run it.</p>

<p><code>bash Installing rbenv on Ubuntu 12.04
sudo apt-get install zlib1g-dev openssl libopenssl-ruby1.9.1 libssl-dev libruby1.9.1 libreadline-dev git-core make make-doc
cd ~
git clone git://github.com/sstephenson/rbenv.git .rbenv
echo &#39;export PATH=&quot;$HOME/.rbenv/bin:$PATH&quot;&#39; &gt;&gt; ~/.bashrc
echo &#39;eval &quot;$(rbenv init -)&quot;&#39; &gt;&gt; ~/.bashrc
exec $SHELL # Restart the shell
mkdir -p ~/.rbenv/plugins
cd ~/.rbenv/plugins
git clone git://github.com/sstephenson/ruby-build.git
git clone git://github.com/sstephenson/rbenv-gem-rehash.git
rbenv install 1.9.3-p362
rbenv rehash
rbenv global 1.9.3-p362
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby and Rails]]></title>
    <link href="http://blog.parkermoore.de/2012/06/25/ruby-and-rails/"/>
    <updated>2012-06-25T23:38:00-04:00</updated>
    <id>http://blog.parkermoore.de/2012/06/25/ruby-and-rails</id>
    <content type="html"><![CDATA[<p>So there&#39;s been a lot of hype about <a href="http://www.ruby-lang.org/en/">Ruby</a> over the past several years. For those of you who are interested in programming and programming languages, you heard about it right from the start, as its beautiful syntax and ease of use lured many programmers into its use.</p>

<p>While Ruby is wonderful, it wouldn&#39;t be what it is today without the existence of <a href="http://rubyonrails.org/">Ruby on Rails</a>. This web framework posed the first real threat to PHP. Rails was powerful and agile, and helped web devs create incredible web apps with incredible ease. The generators that came along with this gem made it possible to get a completely functional website up in a matter of <em>hours</em>, rather than days. That was incredible.</p>

<p>I used Rails on and off, switching between it and CakePHP. I didn&#39;t really understand Rails&#39; routes and wanted something like CakePHP&#39;s <code>bake</code> functionality which creates an entire scaffold with styling and everything. I didn&#39;t object to the un-RESTful CakePHP nature of using just <code>GET</code> and <code>POST</code> requests, as I didn&#39;t need the RESTful functionality for any of the sites I was creating. I used Rails for a couple projects, but it always felt like I was coding more than was necessary.</p>

<p>I started working at <a href="http://www.thinktopography.com">Think Topography</a> this summer and was tasked with building the new <a href="http://www.ithacahours.com">Ithaca Hours</a> mobile web app that would facilitate the use of Ithaca Hours. My boss had always used Rails and suggested that I use Rails for the API end of this project. It seemed like the best choice, given the requirements of the project, and so it began: I dove back into Rails.</p>

<p>Once I wrapped my head around routes and the devise/warden authentication framework, I was truckin&#39;. I was making huge progress on this API and learning gobs of information along the way. I was loving Rails and appreciating its incredible power. I was writing tests in rspec, which was a joy when combined with factory_girl.</p>

<p>I recently worked on a project for <a href="https://www.mhusa.com/contact-tools/login.asp?c">Moët &amp; Chandon USA</a> that was built upon the CakePHP framework, and I was not nearly as excited about returning to this framework as I expected to be, given my incredible comfort with the language and the framework.</p>

<p>But my work at Think Topography has changed me -- I&#39;m a Rails guy for sure.</p>
]]></content>
  </entry>
  
</feed>
