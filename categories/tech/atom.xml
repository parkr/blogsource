<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tech | Hey, Iâ€™m Parker.]]></title>
  <link href="http://blog.parkermoore.de/categories/tech/atom.xml" rel="self"/>
  <link href="http://blog.parkermoore.de/"/>
  <updated>2014-07-17T00:21:04-04:00</updated>
  <id>http://blog.parkermoore.de/</id>
  <author>
    <name><![CDATA[Parker Moore]]></name>
    <email><![CDATA[parkrmoore@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Don't Like Being Tracked?]]></title>
    <link href="http://blog.parkermoore.de/2014/07/16/dont-like-being-tracked/"/>
    <updated>2014-07-16T21:58:53-04:00</updated>
    <id>http://blog.parkermoore.de/2014/07/16/dont-like-being-tracked</id>
    <content type="html"><![CDATA[<p>I don&#39;t like being tracked by Web giants when I&#39;m not on their websites. As
more sites integrate Twitter, Facebook, and Google support, I can&#39;t help
but be tracked on almost every site I visit.</p>

<p>Luckily, the integrations for these three aforementioned companies is quite
simple to subvert (at least partially). If you&#39;re running a unix-based
machine, you can add just a few lines to your <code>/etc/hosts</code> file and you&#39;re
well on your way to Web privacy.</p>

<p>Open up a new tab, and open the Developer Console. Open the Network tab.
Now navigate to your favourite blog, news site, etc. You&#39;ll see each
individual network request that is made from that page listed in the
Network pane of the Developer Console. Scroll through requests and make
note of the domain names you wish to block.</p>

<p>Once you have the list of domain names, simply use your <code>hosts</code> file to
reroute those domains to your local server (<code>127.0.0.1</code>). Here&#39;s an example:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">127.0.0.1     connect.facebook.net
127.0.0.1     google-analytics.com www.google-analytics.com
127.0.0.1     platform.twitter.com
127.0.0.1     adroll.com a.adroll.com d.adroll.com
127.0.0.1     ib.adnxs.com
127.0.0.1     googleadservices.com www.googleadservices.com
</code></pre></div>
<p>In this example, I&#39;ve blocked Facebook, Google Analytics, Twitter, Ad Roll,
Google Ad Services and the unknown &quot;adnxs&quot; service.</p>

<p>Preface each domain name with the address of your local server <code>127.0.0.1</code>
and group each line based on the second-level domain (e.g. <code>adroll.com</code>).
Add each of these lines to your <code>/etc/hosts</code> file (note: this will require
root privileges). Don&#39;t forget to save it when you&#39;re done.</p>

<p>Now navigate to that same site again, with the Network pane still open. You
should now get 404&#39;s or 500&#39;s when you try to access those same domains you
&#39;blocked&#39;.</p>

<p>For a solution that doesn&#39;t require halting access to these hosts, check
out the Tor project.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Always Moving Forward]]></title>
    <link href="http://blog.parkermoore.de/2014/04/03/always-moving-forward/"/>
    <updated>2014-04-03T16:28:07-04:00</updated>
    <id>http://blog.parkermoore.de/2014/04/03/always-moving-forward</id>
    <content type="html"><![CDATA[<p><a href="https://parker.vsco.co"><img src="http://image.vsco.co/1/51c771649686d3572/52d5e979726708dc7c00040f/1024x768/vsco_011414_24.jpg" alt="Emeryville California"></a></p>

<p>Today, I&#39;m proud to announce that I have accepted a job offer from <a href="https://vsco.co/">Visual Supply Co</a>,
a small and happenin&#39; start-up based in the Bay Area. Visual Supply Co,
also known as VSCO, produces the well-loved <a href="https://vsco.co/vscocam">VSCO Cam</a> iPhone
and Android apps, as well as <a href="https://vsco.co/film">VSCO Film</a>, <a href="https://grid.vsco.co">VSCO Grid</a>, and <a href="https://vsco.co/vscokeys">VSCO Keys</a>.
I&#39;ll be working on all things web, including the Grid service and the API.</p>

<p>Super stoked to begin this next chapter in my journey through life working
on a slick series of products with a stellar team. Follow my adventure on
<a href="https://parker.vsco.co">my grid</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing Command-T with OS X Maverick's Built-In Vim]]></title>
    <link href="http://blog.parkermoore.de/2014/01/02/installing-command-t-with-os-x-mavericks-built-in-vim/"/>
    <updated>2014-01-02T01:03:00-05:00</updated>
    <id>http://blog.parkermoore.de/2014/01/02/installing-command-t-with-os-x-mavericks-built-in-vim</id>
    <content type="html"><![CDATA[<p>I was fortunate enough to, just today, pick up a new computer. My first hardware
in over 4 years, I had been holding off. Once my trusty MacBook Pro bit the dust
last night and I found out the repair cost was extraordinary, I bit the bullet.</p>

<p>So, you&#39;re probably in a similar place. You relatively recently got a shiny new
Macintosh and you&#39;re so excited to start writing code and making a difference
with those skillz of yours. Except one this is missing: <a href="https://github.com/wincent/Command-T">Command-T</a>.</p>

<p>Lucky for you, sir, I am here to help. OS X Maverick&#39;s built-in vim distribution
comes with Ruby support already (which it needs for Command-T) so you&#39;re good
there. Now you need to download and compile Command-T. Should be easy, right?
Well, not quite.</p>

<p>Mavericks was notable for Ruby users because it ships with Ruby 2.0. All
previous versions that I had ever used shipped with 1.8.7 so this was a huge
bonus. Problem is, your pre-installed vim wasn&#39;t compiled with 2.0.0, it was
compiled with 1.8.7.</p>

<p>To check this, run the following in vim in NORMAL mode:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">:ruby puts "#{RUBY_VERSION}-p#{RUBY_PATCHLEVEL}"
</code></pre></div>
<p>For me, that output <code>1.8.7-p358</code>. So that means the Ruby verison that vim is
using is <code>1.8.7-p358</code>, and we need to compile Command-T with that version. To do
so, install it:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="gp">$ </span>rbenv install 1.8.7-p358
</code></pre></div>
<p>Boom! Now download and install Command-T:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="gp">$ </span>git clone https://github.com/wincent/Command-T.git ~/.vim/bundle/Command-T
<span class="gp">$ </span><span class="nb">cd</span> ~/.vim/bundle/Command-T <span class="c"># for tpope's Pathogen</span>
<span class="gp">$ </span>rbenv <span class="nb">local </span>1.8.7-p358
<span class="gp">$ </span>rbenv rehash
<span class="gp">$ </span>gem install bundler
<span class="gp">$ </span>bundle install
<span class="gp">$ </span>bundle <span class="nb">exec </span>rake make
</code></pre></div>
<p>Aaaaand boom, you&#39;re done. Open up <code>vim</code> and type your leaderkey then <code>t</code> (for
me, that&#39;s <code>,t</code>) to launch the prompt.</p>

<p>If you get a weird SIGTERM error when you launch <code>vim</code>, then you installed
Command-T with the wrong Ruby version. Remove <code>ruby/command-t/ext.bundle</code> and
try again.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fixing Memory Issues in Dokku hosted on DigitalOcean 512MB Droplet]]></title>
    <link href="http://blog.parkermoore.de/2013/12/21/fixing-memory-issues-in-dokku-hosted-on-digitalocean-512mb-droplet/"/>
    <updated>2013-12-21T12:23:00-05:00</updated>
    <id>http://blog.parkermoore.de/2013/12/21/fixing-memory-issues-in-dokku-hosted-on-digitalocean-512mb-droplet</id>
    <content type="html"><![CDATA[<p>As many other Heroku customers, I rejoiced when <a href="https://github.com/progrium/dokku">Dokku</a> was released. To have
complete freedom to host as many apps with whatever databases or other plugins
I wanted -- all for the cost of a small VM -- was wonderful news.</p>

<p>I decided, for cost&#39;s sake, to boot up one of those famed $5 <a href="https://digitalocean.com">DigitalOcean</a>
Droplets. I didn&#39;t see that DigitalOcean provides an &quot;app&quot; for Dokku, so I
created a vanilla box of Ubuntu 13.04 and pressed on. I got everything up and
running and went to go deploy my first app, only to see this when I ran
<code>git push</code>:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">runtime: panic before malloc heap initialized
fatal error: runtime: cannot allocate heap metadata
</code></pre></div>
<p>Well, golly, that sure is unhelpful. Looks like 512MB doesn&#39;t cut it. Luckily,
we can avoid paying the extra $5/mo for the 1GB version by running the following
as <code>root</code>:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">dd <span class="k">if</span><span class="o">=</span>/dev/zero <span class="nv">of</span><span class="o">=</span>/extraswap <span class="nv">bs</span><span class="o">=</span>1M <span class="nv">count</span><span class="o">=</span>512
mkswap /extraswap
</code></pre></div>
<p>Then adding the following to your <code>/etc/fstab</code> file so the swap persists between
reboots:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">/extraswap         none            swap    sw                0       0
</code></pre></div>
<p>Then run this to enable <code>/extraswap</code> for swapping:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">swapon -a
</code></pre></div>
<p>Boom. Now re-run <code>git push</code> and you&#39;re in business. Magic!</p>

<p>Credit goes to the brilliant <a href="https://github.com/dhassler">@dhassler</a> for <a href="https://github.com/dotcloud/docker/issues/1555#issuecomment-22874190">the idea and the code</a>. Just
thought I&#39;d share and preserve for my own benefit in the future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Taking Over Someone Else's Open-Source Project]]></title>
    <link href="http://blog.parkermoore.de/2013/11/04/taking-over-someone-elses-open-source-project/"/>
    <updated>2013-11-04T21:23:00-05:00</updated>
    <id>http://blog.parkermoore.de/2013/11/04/taking-over-someone-elses-open-source-project</id>
    <content type="html"><![CDATA[<p>Last December (2012), <a href="http://tom.preston-werner.com">Tom Preston-Werner</a> granted me <a href="/images/mojombo-added-parkr-to-jekyll.png">push &amp; pull access to
mojombo/jekyll</a>. I had written a <a href="/2012/12/11/an-open-letter-to-tom-preston-werner/">letter to Tom about the future of Jekyll</a>
and after a bit of persistence on my part, he relented:</p>

<p><img src="/images/mojombo-added-parkr-to-jekyll.png" alt="mojombo added parkr to mojombo/jekyll"></p>

<p>After a somewhat lengthy (and <a href="/images/jekyll-shall-inherit-the-earth.png">amusing</a>) conversation via Skype, I knew what
Tom&#39;s priorities were for the project and where I could help. I started off
trimming down the number of open issues. At the time, they numbered just over 300.
After a quick visit to Buffalo to tackle some issues with <a href="http://quaran.to">Nick Quaranto</a> at a
Buffalo <a href="http://openhack.github.io">OpenHack</a> meetup at <a href="http://coworkbuffalo.com">CoworkBuffalo</a>, we were down to fewer than 200
open issues. I continued to work through them (much to my parents&#39; dismay) all
through Winter Break. I was making good progress in the triage process: I knew
what many of the problems were with v0.12.1 and was formulating ideas about how
we might go about fixing them.</p>

<p><img src="/images/jekyll-shall-inherit-the-earth.png" alt="jekyll shall inherit the earth"></p>

<p>In January, I flew out to San Francisco to visit my sister for a week. I setup a
meeting with Tom to talk more about Jekyll and a plan for moving forward to a
v1.0.0 release. After about an hour or so at GitHub&#39;s office in SoMa, talking
through various PR&#39;s, Tom said I could start merging pull requests.</p>

<p>Consultation with Tom was challenging (he runs a multi-million dollar company
after all), as it was increasingly difficult for him to find time for Jekyll.
Despite <a href="https://github.com/mojombo/jekyll/issues/578#issuecomment-11414645">announcing that he was going to commit some of his &quot;20% time&quot; to Jekyll</a>,
he eventually abandoned that as impractical. As time went on, I received fewer
replies to my emails and eventually stopped sending anything that didn&#39;t
absolutely <em>require</em> Tom&#39;s input.</p>

<p>In March, I knew I needed more help. Tom wasn&#39;t able to give much time and I
was trying to tackle this project alone. I had noticed that <a href="http://mattr.info">Matt Rogers</a>
shared my vision for Jekyll, so I asked Tom to add him on as a contributor to
the repo. By v1.0.3, he had started merging pull requests like a BAW$ and was
the sanity to my ridiculously-obsessed, inexperienced mind. Since Matt joined, I
haven&#39;t really heard much from Tom. I write the occasional email and get the
occasional reply but he&#39;s essentially phased out of the normal development of
Jekyll. Matt &amp; I have essentially taken over the project altogether.</p>

<p>By May, we were ready to ship v1.0.0. With the help of all the amazing
contributors, Matt, and my many mentors along the way, I finally ran
<code>rake release</code> for 1.0. The project was ours.</p>

<p>Since realizing that this product has few constraints outside of those I&#39;ve
constructed for it in my mind (no one is going to tell me, &quot;No, you may not
implement that feature or add that enhancement&quot; without a valid argument as to
my solution&#39;s invalidity), I&#39;ve been thinking about what it means to take over
someone else&#39;s project. <a href="https://github.com/mojombo/jekyll/commit/d189e05d236769c1e5594af9db4d6eacb86fc16e">Jekyll is 5 years old.</a> I wasn&#39;t there in 2008 when
it was first born as <code>autoblog</code>. Jekyll has changed a lot, as has its vision and
purpose. It&#39;s used by lots of people now, whether via <a href="http://pages.github.com">GitHub Pages</a> or
locally.</p>

<p>Taking over someone else&#39;s project takes a deep understanding of what the
project is and what it should be. As much as I wish Jekyll could make me
krÃ¤uterquark, that&#39;s outside the scope of the project. Developing that lens is
crucial when taking over someone else&#39;s project.</p>

<p>Mentoring on the part of the original owner/previous maintainer(s) is
exceedingly significant in the development of this critical lens. I am so
grateful that I was able to meet up with Tom back in January and to have some
amount of input from him as I understood what the project should be.</p>

<p>It would be ill-advised to take over someone else&#39;s project without a partner.
Once Matt joined the team, Tom was able to step back into a much lesser role.
If I had tried to do what I did without any guidance (or at least sanity
checks), Jekyll v1.0.0 would have been a complete shit-show.</p>

<p>Trust in the community must also be earned. If people highly doubted my ability
to handle Jekyll, Tom would have likely removed me and found a replacement. I
argued a lot and got into some pretty heated debates at the beginning. There
were a couple people who didn&#39;t share the vision that I had inherited from Tom
and stopped contributing to the project altogether. I feel like we now have a
pretty great community around Jekyll and are able to help each other out and
share cool plugins and sites that we made for/with Jekyll.</p>

<p>Taking over someone else&#39;s open-source project was new terrain for me in
December, and still is today. It can be successful with the right amount of
mentoring and gradual removal of trusted feedback by the previous maintainer(s).</p>

<p>With some old projects that are brought back to life by the passing of the
torch, the new maintainers are able to experience the added bonus of feeling
like Frankenstein, which, I will say, is a pretty cool feeling.</p>

<p><img src="/images/it-lives.jpg" alt="igor"></p>
]]></content>
  </entry>
  
</feed>
